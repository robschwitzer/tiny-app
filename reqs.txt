//DISPLAY REQUIREMENTS
1. site header:

      -if logged in, the header shows:

          -user's email

          -a logout button which makes a POST request /logout

      -if a user is not logged in, the header shows:

          -a link to the login page /login

          -a link to the registration page /register


//BEHAVIOR REQUIREMENTS
1. GET /
      -if logged in:

          redirect to /urls

      if user is not logged in:

          redirect to /login


2. GET /urls
      -if logged in:

          returns HTML with:

            -the site header

            -a list/table of URLs the user has created, each list item containing:

            -a short URL

            -the short URLs matching long URL

            -an edit button which makes a GET request to /urls/:id

            -a delete button which makes a POST   request to /urls/:id/delete

            -a link to 'Create New SHort Link' which makes a GET request to /urls/new

  GET /urls/new

      -if logged in:

          returns HTML with:

            -the site header

            -a form which contains:

              -a text input field for the original (long) URL

              -a submit button which makes a POST request to /urls

      if not logged in:

          -redirects to the /login page

GET /u/:id

      -if URL for the given ID exists:

            -redirects to the corresponding long URL

      -if URL for the given ID does not exist:

            -returns HTML with a relevant error message

POST /urls

      -if logged in:

            -generates a short URL, saves it, and associates it with the user

            -redirects to /urls/:id, where :id matches the ID of the newly saved URL

      -if not logged in:

            -returns HTML with a relevant error message

POST /urls/:id

      -if user is logged in and owns the URL for the given ID:

            -updates the URL

            -redirects to /urls

      -if user is not logged in:

            -returns HTML with relevant error message

      -if user is logged in but doesn't own the URL for the given ID:

            -returns HTML with a relevant error message

POST /urls/:id/delete

      -if user is logged in  and owns the URL for the given ID:

            -deletes the URL

            -redirects to /urls

      -if user is not logged in:

            -returns HTML with relevant error message

      -if user is logged in but does not own the URL for the given ID:

            -returns HTM<L with relevant error message

GET /login

      -if logged in:

            -redirects to /urls

      -if not logged in:

            -returns HTML with a form which contains:

                  -input fields for email and password

                  -a register button that makes a POST request to /register

POST /login

      -if email and password params match an existing user:

            -sets a cookie

            -redirects to /urls

      -if email and password params dont match an existing user:

            -returns HTML with a relevant error message

POST /register

      -if email or password are empty:

            -returns HTML with relevant error message

      if email already exists:

            -returns HTML with relevant error message

      otherwise:

            -creates a new user

            -encrypts the new user's password with bcrypt

            -sets a cookie

            -redirects to /urls

POST /logout

      -deletes cookie

      -redirects to /urls


